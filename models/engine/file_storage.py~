#!/usr/bin/env python3
"class that serializes deserializes instances"
import json
import os
from datetime import datetime
from models.base_model import BaseModel

classes = {"BaseModel": BaseModel}

class FileStorage():
    "class that serializes deserializes instances"
    __file_path = "memory.json"
    __objects = {}

    def all(self):
        return self.__objects


    def new(self, obj):
        self.temp_obj = obj
        self.key = f"{obj.__class__.__name__}.{obj.id}"
        self.__objects[self.key] = obj

    def save(self):
        with open(self.__file_path, "w") as fp:
            obj_dict = {}
            for key, value in self.__objects.items():
                obj_dict[key] = self.to_dict(value)
            json.dump(obj_dict, fp, indent=4)

    def reload(self):
        if os.path.exists(self.__file_path):
            with open(self.__file_path, "r") as fp:
                dict_objs = json.load(fp)
                dict_objs = self.iso_to_datetime(dict_objs)
            for key, value in dict_objs.items():
                class_obj = classes[value['__class__']]
                del value['__class__']
                self.__objects[key] = class_obj(value)

    def iso_to_datetime(self, dict):
        dict_obj = {}
        for key, value in dict.items():
            if type(value) is dict:
                for key2, value2 in value:
                    if key2 == 'created_at' or key2 == 'updated_at':
                        dict_obj[key][key2] = datetime.fromisoformat(value2)
                    else:
                        dict_obj[key][key2] = value2
            else:
                dict_obj[key] = value
        return dict_obj

    def to_dict(self, obj):
        """
        returns a dictionary containing
        all keys/values of __dict__ of the instance
        """
        obj_dict = {}
        for key, value in obj.__dict__.items():
            if type(value) is datetime:
                obj_dict[key] = value.isoformat()
            else:
                obj_dict[key] = value
        obj_dict['__class__'] = obj.__class__.__name__
        return obj_dict
